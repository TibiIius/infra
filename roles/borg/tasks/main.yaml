---
- name: Check if repokey dir exists
  ansible.builtin.stat:
    path: "/root/.config/borg/keys"
  register: borg_repokey_dir

- name: Copy repo key if not exists
  ansible.builtin.copy:
    dest: /tmp/borg_repokey
    content: "{{ borg_repo_key }}"
    mode: "0600"
    group: root
    owner: root
  when: not borg_repokey_dir.stat.exists

- name: Run borgbackup role
  ansible.builtin.include_role:
    name: borgbase.ansible_role_borgbackup

# Import with `lineinfile` since borg saves SSH keys a bit weirdly, and Ansible just freaks out about that
- name: Add repo SSH key to authorized_keys
  ansible.builtin.lineinfile:
    state: present
    line: "{{ item }}"
    path: /root/.ssh/known_hosts
  loop: "{{ borgbackup_known_hosts_repo }}"

- name: Import repokey if not exists
  ansible.builtin.command: borg key import '{{ borg_repository }}' /tmp/borg_repokey
  register: borg_key_import_return_code
  changed_when: borg_key_import_return_code.rc == 0
  when: not borg_repokey_dir.stat.exists

- name: Check if source dirs are empty/don't exist
  ansible.builtin.find:
    paths: "{{ borg_source_directories }}"
    file_type: any
    hidden: true
  register: borg_dir_files

- name: Restore backups when folders empty/don't exist
  ansible.builtin.command: borgmatic extract --archive latest
  register: borg_restore_cmd
  changed_when: borg_restore_cmd.rc == 0
  when: borg_dir_files.matched <= 0

- name: Install shell script to run on backup failure
  ansible.builtin.template:
    dest: "/usr/local/bin/borg_backup_failed.sh"
    src: "templates/borg_backup_failed.sh.j2"
    owner: root
    group: root
    mode: "0755"

- name: Enable borgmatic systemd timer
  ansible.builtin.systemd:
    name: borgmatic.timer
    enabled: true
    state: started
    daemon_reload: true
